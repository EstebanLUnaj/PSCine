// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Funciones", b =>
                {
                    b.Property<int>("FuncionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FuncionId"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Horario")
                        .HasColumnType("time");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int>("SalaId")
                        .HasColumnType("int");

                    b.HasKey("FuncionId");

                    b.HasIndex("PeliculaId");

                    b.HasIndex("SalaId");

                    b.ToTable("Funciones", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Generos", b =>
                {
                    b.Property<int>("GeneroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneroId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GeneroId");

                    b.ToTable("Generos", (string)null);

                    b.HasData(
                        new
                        {
                            GeneroId = 1,
                            Nombre = "Acción"
                        },
                        new
                        {
                            GeneroId = 2,
                            Nombre = "Aventuras"
                        },
                        new
                        {
                            GeneroId = 3,
                            Nombre = "Ciencia Ficción"
                        },
                        new
                        {
                            GeneroId = 4,
                            Nombre = "Comedia"
                        },
                        new
                        {
                            GeneroId = 5,
                            Nombre = "Documental"
                        },
                        new
                        {
                            GeneroId = 6,
                            Nombre = "Drama"
                        },
                        new
                        {
                            GeneroId = 7,
                            Nombre = "Fantasía"
                        },
                        new
                        {
                            GeneroId = 8,
                            Nombre = "Musical"
                        },
                        new
                        {
                            GeneroId = 9,
                            Nombre = "Suspense"
                        },
                        new
                        {
                            GeneroId = 10,
                            Nombre = "Terror"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Peliculas", b =>
                {
                    b.Property<int>("PeliculaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PeliculaId"));

                    b.Property<int>("Genero")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Trailer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PeliculaId");

                    b.HasIndex("Genero");

                    b.ToTable("Peliculas", (string)null);

                    b.HasData(
                        new
                        {
                            PeliculaId = 1,
                            Genero = 3,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/kyeqWdyUXW608qlYkRqosgbbJyK.jpg",
                            Sinopsis = "Ambientada en el exótico planeta Pandora, donde un ex marine se une a los nativos Na’vi para defender su mundo de la invasión humana",
                            Titulo = "Avatar",
                            Trailer = "https://www.youtube.com/watch?v=5PSNL1qE6VY"
                        },
                        new
                        {
                            PeliculaId = 2,
                            Genero = 5,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/lHu1wtNaczFPGFDTrjCSzeLPTKN.jpg",
                            Sinopsis = "Narra la vida y la carrera del legendario cantante de Queen, Freddie Mercury, desde sus inicios hasta el histórico concierto",
                            Titulo = "Bohemian Rhapsody",
                            Trailer = "https://www.youtube.com/watch?v=mP0VHJYFOAU"
                        },
                        new
                        {
                            PeliculaId = 3,
                            Genero = 4,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/zq8Cl3PNIDGU3iWNRoc5nEZ6pCe.jpg",
                            Sinopsis = "Sigue las aventuras de un mercenario bocazas que adquiere poderes de curación tras someterse a un experimento, y busca venganza contra el hombre que arruinó su vida.",
                            Titulo = "Deadpool",
                            Trailer = "https://www.youtube.com/watch?v=0JnRdfiUMa8"
                        },
                        new
                        {
                            PeliculaId = 4,
                            Genero = 10,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/4ucLGcXVVSVnsfkGtbLY4XAius8.jpg",
                            Sinopsis = "El aterrador caso de una niña poseída por una entidad demoníaca, y el intento de dos sacerdotes por liberarla mediante un ritual de exorcismo.",
                            Titulo = "El Excorcista",
                            Trailer = "https://www.youtube.com/watch?v=Q_Ytf1qGCTM"
                        },
                        new
                        {
                            PeliculaId = 5,
                            Genero = 6,
                            Poster = "https://m.media-amazon.com/images/I/41Al9falobL._AC_UF894,1000_QL80_.jpg",
                            Sinopsis = "Protagonista Tom Hanks, que cuenta la vida de un hombre con un bajo coeficiente intelectual, pero con un gran corazón, que vive extraordinarias aventuras a lo largo de la historia reciente de EEUU.",
                            Titulo = "Forrest Gump",
                            Trailer = "https://www.youtube.com/watch?v=Cyh1LpxnaxI&pp=ygUUZm9ycmVzdCBndW1wIHRyYWlsZXI%3D"
                        },
                        new
                        {
                            PeliculaId = 6,
                            Genero = 8,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/czVhhAaSBFpakur7U8pOIDV9NUG.jpg",
                            Sinopsis = "Un romance entre una inocente estudiante australiana y un rebelde líder de una pandilla juvenil en el contexto de la cultura pop de los años 50",
                            Titulo = "Grease",
                            Trailer = "https://www.youtube.com/watch?v=THd96gHV7Tg&pp=ygUNZ3JlYXNldHJhaWxlcg%3D%3D"
                        },
                        new
                        {
                            PeliculaId = 7,
                            Genero = 7,
                            Poster = "https://images.justwatch.com/poster/138014805/s718/harry-potter-y-la-piedra-filosofal.jpg",
                            Sinopsis = "Presenta a Harry Potter y sus amigos, que inician su educación en el colegio Hogwarts de magia y hechicería, y se enfrentan al malvado Lord Voldemort.",
                            Titulo = "Harry Potter y la piedra filosofal",
                            Trailer = "https://www.youtube.com/watch?v=ZgrCZVjPg9g"
                        },
                        new
                        {
                            PeliculaId = 8,
                            Genero = 3,
                            Poster = "https://m.media-amazon.com/images/I/61xzvfJiNkL._AC_UF894,1000_QL80_.jpg",
                            Sinopsis = "Trata sobre realizar una incepción para implantar una idea en el subconsciente de una persona. El plan se complica debido a la intervención de alguien que parece predecir cada uno de los movimientos.",
                            Titulo = "Inception ",
                            Trailer = "https://www.youtube.com/watch?v=YoHD9XEInc0&pp=ygURaW5jZXB0aW9uIHRyYWlsZXI%3D"
                        },
                        new
                        {
                            PeliculaId = 9,
                            Genero = 3,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/oU7Oq2kFAAlGqbU4VoAE36g4hoI.jpg",
                            Sinopsis = "Muestra el caos que se desata cuando un parque temático con dinosaurios clonados se convierte en una pesadilla para sus visitantes.",
                            Titulo = "Jurassic Park",
                            Trailer = "https://www.youtube.com/watch?v=dLDkNge_AhE"
                        },
                        new
                        {
                            PeliculaId = 10,
                            Genero = 1,
                            Poster = "https://m.media-amazon.com/images/I/81Az82YYZaS.jpg",
                            Sinopsis = "Dirigida por Quentin Tarantino, un homenaje al cine de artes marciales y cuenta la historia de una asesina profesional conocida como La Novia, que despierta de un coma y busca vengarse de sus antiguos compañeros que intentaron matarla.",
                            Titulo = "Kill Bill: Volumen 1",
                            Trailer = "https://www.youtube.com/watch?v=7kSuas6mRpk"
                        },
                        new
                        {
                            PeliculaId = 11,
                            Genero = 6,
                            Poster = "https://es.web.img2.acsta.net/pictures/14/02/27/09/35/442750.jpg",
                            Sinopsis = "Una película de drama e historia dirigida por Steven Spielberg, basada en la novela homónima de Thomas Keneally",
                            Titulo = "La lista de Schindler",
                            Trailer = "https://www.youtube.com/watch?v=BmkchuRJ82w"
                        },
                        new
                        {
                            PeliculaId = 12,
                            Genero = 8,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/zdUA4FNHbXPadzVOJiU0Rgn6cHR.jpg",
                            Sinopsis = "cuenta la historia de una joven que invita a tres hombres a su boda en una isla griega, con la esperanza de descubrir cuál de ellos es su padre.",
                            Titulo = "Mamma Mia!",
                            Trailer = "https://www.youtube.com/watch?v=8RBNHdG35WY"
                        },
                        new
                        {
                            PeliculaId = 13,
                            Genero = 6,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/7lLJgKnAicAcR5UEuo8xhSMj18w.jpg",
                            Sinopsis = "La lucha por la vida de un hombre que queda atrapado en una isla desierta tras sufrir un accidente aéreo, y su posterior regreso a la civilización",
                            Titulo = "Náufrago",
                            Trailer = "https://www.youtube.com/watch?v=SWC9UR1tAho"
                        },
                        new
                        {
                            PeliculaId = 14,
                            Genero = 2,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/eGi5aoxaZveqNLtE7BZJCuWwR3G.jpg",
                            Sinopsis = "El pacífico reino de Azeroth está a punto de entrar en guerra contra unos terribles invasores que han dejado su destruido reino para colonizar otro.",
                            Titulo = "Warcraft El Origen",
                            Trailer = "https://www.youtube.com/watch?v=fuGRN3dYHKg"
                        },
                        new
                        {
                            PeliculaId = 15,
                            Genero = 6,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/7IiTTgloJzvGI1TAYymCfbfl3vT.jpg",
                            Sinopsis = "Dos familias de distinta clase social en Corea del Sur, y las consecuencias de su inesperada relación.",
                            Titulo = "Parasitos",
                            Trailer = "https://www.youtube.com/watch?v=cR05bEhbWAs"
                        },
                        new
                        {
                            PeliculaId = 16,
                            Genero = 6,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/8kEun6U9hTddM7NEfLLCGQKU2Mp.jpg",
                            Sinopsis = "Narra la historia de un boxeador aficionado que recibe la oportunidad de enfrentarse al campeón mundial de los pesos pesados, y se prepara para el combate más importante de su vida.",
                            Titulo = "Rocky",
                            Trailer = "https://www.youtube.com/watch?v=-Hk-LYcavrw"
                        },
                        new
                        {
                            PeliculaId = 17,
                            Genero = 9,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/6yoghtyTpznpBik8EngEmJskVUO.jpg",
                            Sinopsis = "sigue la investigación de dos detectives que persiguen a un asesino en serie que basa sus crímenes en los siete pecados capitales.",
                            Titulo = "Se7en",
                            Trailer = "https://www.youtube.com/watch?v=znmZoVkCjpI"
                        },
                        new
                        {
                            PeliculaId = 18,
                            Genero = 5,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/8gLIksu5ggdfBL1UbeTeonHquxl.jpg",
                            Sinopsis = "La historia real de cómo Ray Kroc, un vendedor de Illinois, conoció a Mac y Dick McDonald, quienes dirigían un local de hamburguesas en el sur de California en la década de 1950.",
                            Titulo = "El Fundador",
                            Trailer = "https://www.youtube.com/watch?v=3uIKyTjmE_U"
                        },
                        new
                        {
                            PeliculaId = 19,
                            Genero = 10,
                            Poster = "https://image.tmdb.org/t/p/w600_and_h900_bestv2/nAU74GmpUk7t5iklEp3bufwDq4n.jpg",
                            Sinopsis = "Una familia se ve obligada a vivir en silencio mientras se esconde de las criaturas que cazan mediante el sonido.",
                            Titulo = "Un lugar tranquilo",
                            Trailer = "https://www.youtube.com/watch?v=RV8gX2bXUOk"
                        },
                        new
                        {
                            PeliculaId = 20,
                            Genero = 9,
                            Poster = "https://www.themoviedb.org/t/p/w600_and_h900_bestv2/ekstpH614fwDX8DUln1a2Opz0N8.jpg",
                            Sinopsis = "Para sobrellevar el insomnio crónico que sufre desde su regreso de Vietnam, Travis Bickle trabaja como taxista nocturno en Nueva York.",
                            Titulo = "Taxi Driver",
                            Trailer = "https://www.youtube.com/watch?v=T5IligQP7Fo"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Salas", b =>
                {
                    b.Property<int>("SalaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaId"));

                    b.Property<int>("Capacidad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SalaId");

                    b.ToTable("Salas", (string)null);

                    b.HasData(
                        new
                        {
                            SalaId = 1,
                            Capacidad = 5,
                            Nombre = "Sala 1"
                        },
                        new
                        {
                            SalaId = 2,
                            Capacidad = 15,
                            Nombre = "Sala 2"
                        },
                        new
                        {
                            SalaId = 3,
                            Capacidad = 35,
                            Nombre = "Sala 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Tickets", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FuncionId")
                        .HasColumnType("int");

                    b.Property<string>("Usuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TicketId");

                    b.HasIndex("FuncionId");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Funciones", b =>
                {
                    b.HasOne("Domain.Entities.Peliculas", "Pelicula")
                        .WithMany("Funciones")
                        .HasForeignKey("PeliculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Salas", "Sala")
                        .WithMany("Funciones")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pelicula");

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Domain.Entities.Peliculas", b =>
                {
                    b.HasOne("Domain.Entities.Generos", "genero")
                        .WithMany("Peliculas")
                        .HasForeignKey("Genero")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("genero");
                });

            modelBuilder.Entity("Domain.Entities.Tickets", b =>
                {
                    b.HasOne("Domain.Entities.Funciones", "funcion")
                        .WithMany("tickets")
                        .HasForeignKey("FuncionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("funcion");
                });

            modelBuilder.Entity("Domain.Entities.Funciones", b =>
                {
                    b.Navigation("tickets");
                });

            modelBuilder.Entity("Domain.Entities.Generos", b =>
                {
                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("Domain.Entities.Peliculas", b =>
                {
                    b.Navigation("Funciones");
                });

            modelBuilder.Entity("Domain.Entities.Salas", b =>
                {
                    b.Navigation("Funciones");
                });
#pragma warning restore 612, 618
        }
    }
}
